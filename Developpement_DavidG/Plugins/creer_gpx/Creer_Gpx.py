# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CreerGpx
                                 A QGIS plugin
 Cette extension permet de creer un Gpx pour Garmin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-03-27
        git sha              : $Format:%H$
        copyright            : (C) 2020 by David Gauthier - Mffp (DIF)
        email                : david.gauthier@mffp.gouv.qc.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Creer_Gpx_dialog import CreerGpxDialog
import os.path

from qgis.core import QgsProject, QgsField
from PyQt5.QtCore import QVariant


from qgis.core import *
import processing
from processing.core.Processing import Processing
from qgis.analysis import QgsNativeAlgorithms

class CreerGpx:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CreerGpx_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Creer un Gpx pour Garmin')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CreerGpx', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Creer_Gpx/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Creer un Gpx pour Garmin'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select   output file ", "", '*.gpx')
        self.dlg.lineEdit.setText(filename)

    def field_select(self):

        layers = QgsProject.instance().layerTreeRoot().children()

        # permet de recupere le layer dans le combobox
        selectedLayerIndex = self.dlg.comboBox.currentIndex()
        selectedLayer = layers[selectedLayerIndex].layer()

        fields = selectedLayer.fields()
        fieldnames = [field.name() for field in fields]
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItems(fieldnames)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CreerGpxDialog()

            # permet d'activer le bouton
            self.dlg.pushButton.clicked.connect(self.select_output_file)

        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([layer.name() for layer in layers])

        # permet de recupere le layer dans le combobox
        selectedLayerIndex = self.dlg.comboBox.currentIndex()
        selectedLayer = layers[selectedLayerIndex].layer()

        fields = selectedLayer.fields()
        fieldnames = [field.name() for field in fields]
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItems(fieldnames)

        # Permet les changements des chamsp selon la couche choisi dans le combobox1
        self.dlg.comboBox.currentIndexChanged.connect(self.field_select)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            # permet de recupere le layer dans le combobox
            selectedLayerIndex = self.dlg.comboBox.currentIndex()
            selectedLayer = layers[selectedLayerIndex].layer()

            # recupere le nom du champ
            field = self.dlg.comboBox_2.currentText()
            output = os.path.join(os.getenv('TEMP'), "tmp.shp")
            ouputProj = os.path.join(os.getenv('TEMP'), "tmpProj.shp")
            gpx = self.dlg.lineEdit.text()

            # Calculer le champ name avec la valeur field
            processing.run("qgis:fieldcalculator",
                           {'INPUT': selectedLayer, 'FIELD_NAME': 'name', 'FIELD_TYPE': 2,
                            'FIELD_LENGTH': 25, 'FIELD_PRECISION': 3, 'NEW_FIELD': True, 'FORMULA': ' \"{0}\"'.format(field),
                            'OUTPUT': output})

            # reprojeter le output en WGS84
            processing.run("native:assignprojection",
                           {'INPUT': output, 'CRS': QgsCoordinateReferenceSystem('EPSG:4326'),
                            'OUTPUT': ouputProj})

            # faire le GPX
            processing.run("gdal:convertformat", {'INPUT': ouputProj, 'OPTIONS': '',
                                                  'OUTPUT': gpx})

            # faire layer avec le gpx
            layer = QgsVectorLayer(gpx, "gpx", "ogr")

            # Permet d'jouter la couche au projet
            QgsProject.instance().addMapLayer(layer)


            # Message de la reuissite
            self.iface.messageBar().pushMessage(
                "Réussi ! ", "Le GeoPackage est situé :  " + gpx,
                level=Qgis.Success, duration=10)

            pass

































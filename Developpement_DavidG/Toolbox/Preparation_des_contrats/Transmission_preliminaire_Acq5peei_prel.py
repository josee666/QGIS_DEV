# -*- coding: utf-8 -*-

"""
/***************************************************************************
 FaireRaccDif
                                 A QGIS plugin
 Faire un racc dif
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-03-24
        copyright            : (C) 2020 by David Gauthier - MFFP (DIF)
        email                : david.gauthier@mffp.gouv.qc.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'David Gauthier - MFFP (DIF)'
__date__ = '2020-03-24'
__copyright__ = '(C) 2020 by David Gauthier - MFFP (DIF)'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import *
import shutil
import os

import processing
from processing.core.Processing import Processing
from qgis.analysis import QgsNativeAlgorithms
host = "Ulysse1"

class TransmissionpreliminaireAcq5peeiprel(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    # Vous pouvez donner les noms que vous voulez.
    # Il faut les utiliser ici bas dans  "def initAlgorithm" et "processAlgorithm"

    INPUT_perm5pre = 'INPUT_perm5pre'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # parametre 1 INPUT FeatureSource
        self.addParameter(QgsProcessingParameterFeatureSource( self.INPUT_perm5pre,  self.tr('Périmetre préliminaire (perm5pre.shp)'),
                [QgsProcessing.TypeVectorAnyGeometry]))



    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        ###### Parametres ###############################################################################
        # Perimietre (perm5pre) en paramètre (ex. Dtxp_Carto\trm_pre\2018\09) Nous pouvons récupérer l'année et le fuseau du path
        # perm5pre = GetParameterAsText(0)

        # Parametres
        # mettre le premier parametre (vector layer) comme input dans un object
        perm5pre = self.parameterAsVectorLayer(parameters, self.INPUT_perm5pre, context)

        environnement_acceptation = False
        if environnement_acceptation is True:
            suffix_env = 'A'
            genUsername = 'Intranet\ADL-Sief-DoffD'
            genPassword = "66uhdf2011feis!"
        else:
            suffix_env = ''
            genUsername = "Intranet\ADL-Sief-DoffP"
            genPassword = 'RRTuijfeis2011!'

        # Dossier temp
        retrav = os.getenv('TEMP')

        # Faire un dossier pour les .shp qui seront transférés dans le doissier trm_pre
        trm_pre_tansfert = os.path.join(retrav, "trm_pre_transfert")
        out = os.path.join(retrav, "trm_pre_transfert", "MTM")

        if not os.path.exists(trm_pre_tansfert):
            os.mkdir(trm_pre_tansfert)
        else:
            pass
        if not os.path.exists(out):
            os.mkdir(out)
        else:
            pass

        try:
            # # connection au serveur ulysse1
            # obj_connec_doff = Securite_pde(environnement_acceptation, genUsername, genPassword, temps_attente=2,host=host)
            # obj_connec_doff.connect_serveur()

            # Path  ===============================================================
            path_adg = r"\\{0}\PDE{1}\ADG".format(host, suffix_env)
            path_adg_EcoForOri_prov = os.path.join(path_adg, "EcoForS5_ORI_Prov")
            path_adg_ForS5 = os.path.join(path_adg, "ForS5")
            folder = os.listdir(path_adg_EcoForOri_prov)
            pathStrucShpVide = r"\\Sef1271a\F1271g\OutilsProdDIF\outils\ADG\Preparation_Contrats\prerequis"

            # trouve le nom de la classe d'entité en arcpy
            # desc = arcpy.Describe(perm5pre)
            # valid = desc.name

            # trouve le nom de la classe d'entité en QGIS
            valid = perm5pre.name()

            test = self.parameterDefinition('INPUT_perm5pre').valueAsPythonString(parameters['INPUT_perm5pre'], context)
            test = test.replace("/Perm5pre.shp", "")

            if valid != "Perm5pre":

                msg = u"\nERREUR : La couche doit se nommer Perm5pre\n"
                feedback.reportError(msg)

            else:

            #   ###################################################################################################

                # GDB et shp ===============================================================
                for f in folder:
                    if (f.startswith("Ass")):
                        path_adg_EcoForOri_provGDB = os.path.join(f, "EcoFor_Ori_Prov.gdb")

                GDB_EcoForOri = os.path.join(path_adg_EcoForOri_prov, path_adg_EcoForOri_provGDB)

                # arcpy
                # desc = arcpy.Describe(perm5pre)

                # # Qgis
                # # trouver le path d'une couche en Input dans QGIS (c une string)
                # path_INPUT_perm5pre = self.parameterDefinition('INPUT_perm5pre').valueAsPythonString(
                #     parameters['INPUT_perm5pre'], context)

                # # Enleve "/Perm5pre.shp" de la string pour avoir seulement le path du shp
                # path_INPUT_perm5pre = path_INPUT_perm5pre.replace("/Perm5pre.shp", "")
                #
                # fus = os.path.basename(path_INPUT_perm5pre)
                #
                # if fus == "04":
                #     gdb = "ForOri456.gdb"
                # if fus == "05":
                #     gdb = "ForOri456.gdb"
                # if fus == "06":
                #     gdb = "ForOri456.gdb"
                # if fus == "07":
                #     gdb = "ForOri07.gdb"
                # if fus == "08":
                #     gdb = "ForOri08.gdb"
                # if fus == "09":
                #     gdb = "ForOri09.gdb"
                # if fus == "10":
                #     gdb = "ForOri10.gdb"
                #
                # GDB_ForS5 = os.path.join(path_adg_ForS5, gdb)
                #
                # strucShpVideAcq5 = os.path.join(pathStrucShpVide, "Structure_acq5.shp")

                msg = u"\n1. Copie GDB localement"
                AddMessage(msg)

                # Copie de la carte ecoforestiere et struture vide
                shutil.copytree(GDB_EcoForOri, os.path.join(retrav, "EcoFor_Ori_Prov.gdb"),
                                ignore=ignore_patterns('*.lock'))

                # GDB ecofor ===============================================================
                GDB_EcoForOriLoc = os.path.join(retrav, "EcoFor_Ori_Prov.gdb")
                gpk_EcoForOriLoc = os.path.join(retrav, "EcoFor_Ori_Prov")

                # Transférer la couche EcoFor_ORI_PROV de EcoFor_Ori_Prov.gdb dans un GeoPackages
                ceCarteEcofor = os.path.join(retrav, "EcoFor_Ori_Prov.gdb") + '|' + 'layername=' + 'EcoFor_ORI_PROV'

                # faire un layer avec la string ceCarteEcofor
                layer = QgsVectorLayer(ceCarteEcofor, 'EcoFor_ORI_PROV', 'ogr')
                options = QgsVectorFileWriter.SaveVectorOptions()
                options.driverName = 'GPKG'
                options.layerName = 'EcoFor_ORI_PROV'
                QgsVectorFileWriter.writeAsVectorFormat(layer, gpk_EcoForOriLoc, options)


                # # ce Local arcpy ===============================================================
                # ceCarteEcofor = os.path.join(GDB_EcoForOriLoc, "TOPO", "EcoFor_ORI_PROV")
                # ceCarteEcoforInterNoGaps = os.path.join(GDB_EcoForOriLoc, "TOPO", "EcoFor_ORI_PROV_InterNoGaps")
                # ceCarteEcoforInterNoGapsSP = os.path.join(GDB_EcoForOriLoc, "TOPO", "EcoFor_ORI_PROV_InterNoGapsSP")
                #
                # Perm5preBuf = os.path.join(GDB_EcoForOriLoc, "TOPO", "Perm4preBuf")
                # newPerm5pre = os.path.join(GDB_EcoForOriLoc, "TOPO", "newPerm4pre")
                # Acq5peei_prel = os.path.join(trm_pre_tansfert, "Acq5peei_prel.shp")

                # ce Local dans un GeoPackage ===============================================================
                gpk_EcoForOriLoc = os.path.join(retrav, "EcoFor_Ori_Prov.gpkg")
                ceCarteEcofor = os.path.join(gpk_EcoForOriLoc, "EcoFor_ORI_PROV")
                ceCarteEcoforInterNoGaps = os.path.join(gpk_EcoForOriLoc, "EcoFor_ORI_PROV_InterNoGaps")
                ceCarteEcoforInterNoGapsSP = os.path.join(gpk_EcoForOriLoc, "EcoFor_ORI_PROV_InterNoGapsSP")

                Perm5preBuf = os.path.join(gpk_EcoForOriLoc, "Perm4preBuf")
                newPerm5pre = os.path.join(gpk_EcoForOriLoc, "newPerm4pre")
                Acq5peei_prel = os.path.join(trm_pre_tansfert, "Acq5peei_prel.shp")


                msg = u"\n2. Creation de la couche Acq5peei_prel"

                AddMessage(msg)

                # faire un buffer de 500 m
                arcpy.Buffer_analysis(in_features=perm5pre, out_feature_class=Perm5preBuf,
                                      buffer_distance_or_field="500 Meters", line_side="FULL", line_end_type="ROUND",
                                      dissolve_option="NONE", dissolve_field="", method="PLANAR")




                # Créé un lyr de la carte ecofor
                lyr_ceCarteEcofor, cnt_ceCarteEcofor = creerlyr(ceCarteEcofor)

                # faire une selection location intersect avec perimetre sur la carte ecofor prov
                arcpy.SelectLayerByLocation_management(in_layer=lyr_ceCarteEcofor, overlap_type="INTERSECT",
                                                       select_features=Perm5preBuf, search_distance="",
                                                       selection_type="NEW_SELECTION",
                                                       invert_spatial_relationship="NOT_INVERT")

                # faire un union no gaps sur l'extraction (bouche les trous)
                arcpy.Union_analysis(in_features=lyr_ceCarteEcofor, out_feature_class=ceCarteEcoforInterNoGaps,
                                     join_attributes="ALL", cluster_tolerance="", gaps="NO_GAPS")

                # Multi part to sp
                arcpy.MultipartToSinglepart_management(ceCarteEcoforInterNoGaps, ceCarteEcoforInterNoGapsSP)

                # faire un dissolve de l'union pour refaire un nouveau perimetre
                arcpy.Dissolve_management(in_features=ceCarteEcoforInterNoGapsSP, out_feature_class=newPerm5pre,
                                          dissolve_field="", statistics_fields="", multi_part="SINGLE_PART",
                                          unsplit_lines="DISSOLVE_LINES")

                # # faire une selection location intersect -1m avec nouveau perimetre sur la carte ecofor prov
                # arcpy.SelectLayerByLocation_management(in_layer=lyr_ceCarteEcofor, overlap_type="INTERSECT", select_features=newPerm4pre, search_distance="-1 Meters", selection_type="NEW_SELECTION", invert_spatial_relationship="NOT_INVERT")

                arcpy.SelectLayerByLocation_management(in_layer=lyr_ceCarteEcofor, overlap_type="WITHIN",
                                                       select_features=newPerm5pre,
                                                       search_distance="", selection_type="NEW_SELECTION",
                                                       invert_spatial_relationship="NOT_INVERT")

                # Copier en .shp la prel localement
                arcpy.CopyFeatures_management(lyr_ceCarteEcofor, Acq5peei_prel)

                #####################################################

                msg = u"\n3. Projection de la couche"
                AddMessage(msg)

                # exporter les couches en .shp dans la bonne projection MTM
                desc = arcpy.Describe(perm4pre)
                fus = os.path.basename(desc.path)

                if fus == "04":
                    proj = 32184
                if fus == "05":
                    proj = 32185
                if fus == "06":
                    proj = 32186
                if fus == "07":
                    proj = 32187
                if fus == "08":
                    proj = 32188
                if fus == "09":
                    proj = 32189
                if fus == "10":
                    proj = 32190

                for file in os.listdir(trm_pre_tansfert):
                    if file.endswith(".shp"):
                        outfc = os.path.join(out, file)
                        arcpy.Project_management(os.path.join(trm_pre_tansfert, file), outfc, proj)

                trm_pre = desc.path
                msg = u"\n4. Transfert de la couche dans le dossier : {0}".format(trm_pre)
                AddMessage(msg)

                # copier les données dans le dossier trm_pre
                for file in os.listdir(out):
                    shutil.copy(os.path.join(out, file), trm_pre)

                msg = u"\n5. Fin du programme"
                AddMessage(msg)


        except Exception as e:
            feedback.reportError(e)
            raise QgsProcessingException(e)


        return {self.INPUT_perm5pre: 'INPUT_perm5pre'}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Transmission preliminaire Acq5peei_prel'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return TransmissionpreliminaireAcq5peeiprel()

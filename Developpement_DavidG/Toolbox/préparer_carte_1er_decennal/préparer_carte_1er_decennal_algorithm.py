# -*- coding: utf-8 -*-

"""
/***************************************************************************
 PreparerCarteDecennal
                                 A QGIS plugin
 Préparer carte 1er décennal
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-13
        copyright            : (C) 2020 by David Gauthier
        email                : david.gauthier@mffp.gouv.qv.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'David Gauthier'
__date__ = '2020-07-13'
__copyright__ = '(C) 2020 by David Gauthier'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import *
from PyQt5.QtCore import QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.core import QgsVectorFileWriter
import os

import processing


class PreparerCarteDecennalAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        # parametre 2 OUTPUT VectorDestination
        self.addParameter(QgsProcessingParameterVectorDestination(self.OUTPUT,
                                                                  self.tr('Feuillet en sortie')))


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.

        source = self.parameterAsVectorLayer(parameters, self.INPUT, context)

        # mettre le deuxieme parametre (output Layer) comme output dans un object
        feuillet = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)

        feedback.pushInfo("\n1- Réparer les géométries\n")


        # faire un réparer les geometries
        repair = processing.run("native:fixgeometries", {'INPUT':source,'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT},
                                                feedback=feedback)["OUTPUT"]

        feedback.pushInfo("\n2- Accrocher les géométries\n")

        # accrocher les geometries
        accrocher = processing.run("qgis:snapgeometries", {'INPUT':repair,'REFERENCE_LAYER':repair,'TOLERANCE':2,'BEHAVIOR':7,
                                                           'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT}, feedback=feedback)["OUTPUT"]

        feedback.pushInfo("\n3- Réparer les géométries\n")
        # faire un réparer les geometries
        repair2 = processing.run("native:fixgeometries", {'INPUT':accrocher,'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT},
                                feedback=feedback)["OUTPUT"]


        # faire un layer avec repair2
        if isinstance(repair2, str):
            layer = QgsVectorLayer(repair2, 'lyr', 'ogr')
        else:
            layer = repair2

        feedback.pushInfo("\n4- Ajouter le champ SUP\n")
        # ajouter un champ SUP
        champ = QgsField('SUP', QVariant.Double )
        layer.dataProvider().addAttributes([champ])
        layer.updateFields()

        feat = layer.getFeatures()
        layer_provider = layer.dataProvider()


        feedback.pushInfo("\n5- Calculer la superficie\n")
        # caluler la superficie en m carrée
        for features in feat:
            id = features.id()
            # trouver l'index du champ
            fields = layer.fields()
            indexChamp = fields.indexFromName('SUP')  # Index du champ
            attr_value = {indexChamp: features.geometry().area()}  # calculer area
            layer_provider.changeAttributeValues({id: attr_value})

        layer.commitChanges()
        feedback.pushInfo("\n6- Sélection des NULL et suppression\n")

        with edit(layer):
            # requete
            request = QgsFeatureRequest().setFilterExpression('"SUP" = -1')

            # we don't need attributes or geometry, skip them to minimize overhead.
            # these lines are not strictly required but improve performance
            request.setSubsetOfAttributes([])
            request.setFlags(QgsFeatureRequest.NoGeometry)

            # supprimer les SUP de -1
            for f in layer.getFeatures(request):
                layer.deleteFeature(f.id())


        feedback.pushInfo("\n7- Sélection des moins de 5000 metres\n")
        # Sélection des superficies moins de 5000m carrée
        # processing.run("qgis:selectbyattribute", {'INPUT':layer,'FIELD':'SUP','OPERATOR':4,'VALUE':'5000','METHOD':0})
        layer.selectByExpression("\"SUP\"<5000" )


        # éliminer les polygones selectionnées

        feedback.pushInfo("\n8- Éliminer les moins de 5000 metres\n")
        # Si je met pas en memoire le resultat du elim ca marche pas.....
        eliminate = processing.run("qgis:eliminateselectedpolygons", {'INPUT':layer,'MODE':2,'OUTPUT':QgsProcessing.TEMPORARY_OUTPUT},
                                   feedback=feedback)["OUTPUT"]

        # sauvegarder le resultat du eliminate
        QgsVectorFileWriter.writeAsVectorFormat(eliminate, feuillet, "UTF-8", eliminate.crs(), "ESRI Shapefile")

        layer = QgsVectorLayer(feuillet, 'lyr', 'ogr')

        feedback.pushInfo("\n9- Ajout du champ FAIT\n")
        # ajouter un champ FAIT
        champ = QgsField('FAIT', QVariant.String)
        layer.dataProvider().addAttributes([champ])
        layer.updateFields()

        return {self.OUTPUT: feuillet}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Nettoyage'


    def icon(self):

        return QIcon(os.path.dirname(__file__) + '/image/broom.png')

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        # return 'Préparer carte 1er décennal'
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return PreparerCarteDecennalAlgorithm()

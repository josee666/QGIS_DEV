# -*- coding: utf-8 -*-

"""
/***************************************************************************
 FaireRaccDif
                                 A QGIS plugin
 Faire un racc dif
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-03-24
        copyright            : (C) 2020 by David Gauthier - MFFP (DIF)
        email                : david.gauthier@mffp.gouv.qc.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'David Gauthier - MFFP (DIF)'
__date__ = '2020-03-24'
__copyright__ = '(C) 2020 by David Gauthier - MFFP (DIF)'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import *
import shutil
import os

import processing
from processing.core.Processing import Processing
from qgis.analysis import QgsNativeAlgorithms

class FaireRaccDifAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    # Vous pouvez donner les noms que vous voulez.
    # Il faut les utiliser ici bas dans  "def initAlgorithm" et "processAlgorithm"

    INPUT_perm5pre = 'INPUT_perm5pre'
    INPUT_FOR = 'INPUT_FOR'
    RAC_DIF = 'RAC_DIF'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # parametre 1 INPUT FeatureSource
        self.addParameter(QgsProcessingParameterFeatureSource( self.INPUT_perm5pre,  self.tr('Périmetre préliminaire (perm5pre.shp)'),
                [QgsProcessing.TypeVectorAnyGeometry]))

        # parametre 2 INPUT FeatureSource
        self.addParameter(QgsProcessingParameterFeatureSource(self.INPUT_FOR,self.tr('Classe dentité du fuseau forestier'),
                [QgsProcessing.TypeVectorAnyGeometry]))

        # parametre 2 OUTPUT VectorDestination
        self.addParameter(QgsProcessingParameterVectorDestination(self.RAC_DIF,
                self.tr('Racc_dif.shp')))

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Parametres
        # mettre le premier parametre (vector layer) comme input dans un object
        perm5pre = self.parameterAsVectorLayer(parameters, self.INPUT_perm5pre, context)

        # mettre le deuxieme parametre (vector layer) comme input dans un object
        ce_for = self.parameterAsVectorLayer(parameters, self.INPUT_FOR, context)

        # mettre le troisieme parametre (output Layer) comme output dans un object
        Racc_dif = self.parameterAsOutputLayer(parameters, self.RAC_DIF, context)

        # Dossier temp
        retrav = os.getenv('TEMP')

        # Faire un dossier pour les .shp qui seront transférés dans le dossier trm_pre
        trm_pre_tansfert = os.path.join(retrav, "trm_pre_transfert")

        if not os.path.exists(trm_pre_tansfert):
            os.mkdir(trm_pre_tansfert)
        else:
            pass

        # # J'ai pas acces au reseau, donc je desactive

        # pathStrucShpVide = r"\\Sef1271a\F1271g\OutilsProdDIF\outils\ADG\Preparation_Contrats\prerequis"
        #
        # list_racc_dif = [os.path.join(pathStrucShpVide, "Racc_dif.dbf"),
        #                  os.path.join(pathStrucShpVide, "Racc_dif.prj"),
        #                  os.path.join(pathStrucShpVide, "Racc_dif.sbn"),
        #                  os.path.join(pathStrucShpVide, "Racc_dif.sbx"),
        #                  os.path.join(pathStrucShpVide, "Racc_dif.shp"),
        #                  os.path.join(pathStrucShpVide, "Racc_dif.shx")]
        #
        # for li in list_racc_dif:
        #     shutil.copy(li, trm_pre_tansfert)

        newperm5trm = os.path.join(trm_pre_tansfert, "newperm5trm.shp")
        # Rac_Dif = os.path.join(trm_pre_tansfert, "Racc_Dif_for.shp")
        # Rac_Dif_loc = os.path.join(trm_pre_tansfert, "Racc_dif.shp")
        # Rac_Dif_loc_MTM = os.path.join(trm_pre_tansfert, "Racc_dif_MTM.shp")
        perm5pre_buff = os.path.join(trm_pre_tansfert, "perm5pre_buff.shp")
        dissolve = os.path.join(trm_pre_tansfert, "dissolve.shp")
        ce_for_select = os.path.join(trm_pre_tansfert, "ce_for_select.shp")

        ##### RAC_DIFF  #####################
        # faire la zone du Racc_dif, donc un buffer de 500 metre
        # arcpy.Buffer_analysis(in_features=perm5pre, out_feature_class=perm5pre_buff,
        #                       buffer_distance_or_field="500 Meters",
        #                       line_side="FULL", line_end_type="ROUND", dissolve_option="NONE", dissolve_field="",
        #                       method="PLANAR")

        processing.run("native:buffer",
                       {'INPUT': perm5pre, 'DISTANCE': 500, 'SEGMENTS': 5,
                        'END_CAP_STYLE': 1, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2, 'DISSOLVE': False,
                        'OUTPUT': perm5pre_buff})


        # lyr_ce_ForS5, cnt_ce_ForS5 = creerlyr(ce_ForS5)

        # faire une selection location intersect  sur ForS5 pour générer le Racc_dif
        # arcpy.SelectLayerByLocation_management(in_layer=lyr_ce_ForS5, overlap_type="INTERSECT",
        #                                        select_features=perm5pre_buff, search_distance="",
        #                                        selection_type="NEW_SELECTION", invert_spatial_relationship="NOT_INVERT")
        #
        processing.run("native:selectbylocation",
                       {'INPUT': ce_for,
                        'PREDICATE': [0], 'INTERSECT': perm5pre_buff, 'METHOD': 0})

        # # faire un union no gaps sur l'extraction (bouche les trous avec arcpy)
        # arcpy.Union_analysis(in_features=lyr_ce_ForS5, out_feature_class=Rac_DifNoGaps, join_attributes="ALL",
        #                      cluster_tolerance="", gaps="NO_GAPS")

        # copier la selection... je ne sais pas encore comment utiliser les couches en memoire encore....
        processing.run("native:saveselectedfeatures", {'INPUT': ce_for, 'OUTPUT': ce_for_select})

        # L'union dans QGIS ne bouche pas les trous comme dans arcpy. Il faut que je le fasse en 2 etape.
        # Un dissolve de ma selection et apres je vais suppirmer les trous a l'interieur du dissolve.
        processing.run("native:dissolve", {'INPUT': ce_for_select, 'FIELD': [], 'OUTPUT': dissolve})

        # suppirmer les trous a l'interieur du dissolve
        processing.run("native:deleteholes", {'INPUT':dissolve,'MIN_AREA':999999999,'OUTPUT':newperm5trm})

        # arcpy.SelectLayerByLocation_management(in_layer=lyr_ce_ForS5, overlap_type="WITHIN",
        #                                        select_features=newperm5trm,
        #                                        search_distance="", selection_type="NEW_SELECTION",
        #                                        invert_spatial_relationship="NOT_INVERT")

        # refaire une selection WITHIN avec le nouveau perimetre pas de trou
        
        processing.run("native:selectbylocation", {'INPUT': ce_for, 'PREDICATE': [6],
                                                   'INTERSECT': newperm5trm, 'METHOD': 0})
        # Copier le racc_dif
        # arcpy.CopyFeatures_management(lyr_ce_ForS5, Rac_Dif)
        processing.run("native:saveselectedfeatures", {'INPUT': ce_for, 'OUTPUT': Racc_dif})


        # TODO il reste a mettre le Racc_dif dans la structure vide (officielle) et projeter dans le bon fuseau MTM


        return {self.RAC_DIF: 'Racc_dif.shp'}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Faire un Racc dif'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return FaireRaccDifAlgorithm()

# -*- coding: utf-8 -*-

"""
/***************************************************************************
 sptialJoinLargestOverlap
                                 A QGIS plugin
 Join spatial permettant de recuperer les attributs ayant la plus grande proportion de superposition de la table ou classe d'entités join
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-08-21
        copyright            : (C) 2020 by David Gauthier MFFP,DIF
        email                : david.gauthier@mffp.gouv.qc.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'David Gauthier MFFP,DIF'
__date__ = '2020-08-21'
__copyright__ = '(C) 2020 by David Gauthier MFFP,DIF'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import *
from PyQt5.QtCore import QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.core import QgsVectorFileWriter
import os

import processing
from processing.tools import dataobjects
from QGIS_commun import spatialJoinLargestOverlap
import csv
import pandas
import pandas as pd

class sptialJoinLargestOverlapAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    target_features = 'target_features'
    join_features = 'join_features'
    outfc = 'outfc'
    Pente = 'Pente'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # parametre 1 INPUT FeatureSource
        self.addParameter(QgsProcessingParameterFeatureSource( self.target_features,  self.tr("Classe d'entité ou vous voulez effectuer la jointure"),
                                                               [QgsProcessing.TypeVectorAnyGeometry]))

        # parametre 2 INPUT FeatureSource
        self.addParameter(QgsProcessingParameterFeatureSource(self.join_features,self.tr("Classe d'entité qui servira pour la jointure"),
                                                              [QgsProcessing.TypeVectorAnyGeometry]))

        # parametre 3 OUTPUT VectorDestination
        self.addParameter(QgsProcessingParameterVectorDestination(self.outfc,
                                                                  self.tr("Sortie (Jointure)" )))

        self.addParameter(
            QgsProcessingParameterBoolean(self.Pente,self.tr('Join spatial des Pentes'),
                False,
                optional=True))

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """


        # Parametres
        # mettre le premier parametre (vector layer) comme input dans un object
        target_features = self.parameterAsVectorLayer(parameters, self.target_features, context)

        # mettre le deuxieme parametre (vector layer) comme input dans un object
        join_features = self.parameterAsVectorLayer(parameters, self.join_features, context)

        # mettre le troisieme parametre (output Layer) comme output dans un object
        outfeature = self.parameterAsOutputLayer(parameters, self.outfc, context)

        # Parametre booléen pour les pentes
        Pente = self.parameterAsBool(parameters, self.Pente, context)


        # Pente = True
        spatialJoinLargestOverlap(target_features, join_features, outfeature, Pente)


        return {self.outfc:outfeature}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Jointure spatiale - Plus grande superposition'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''
    def icon(self):

        return QIcon(os.path.dirname(__file__) + '/image/SpatialJoin.png')

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return sptialJoinLargestOverlapAlgorithm()

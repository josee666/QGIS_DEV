# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SdatToTif
                                 A QGIS plugin
 Sdat to Tif
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-21
        copyright            : (C) 2020 by David Gauthier MFFP
        email                : david.gauthier@mffp.gouv.qc.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'David Gauthier MFFP'
__date__ = '2020-07-21'
__copyright__ = '(C) 2020 by David Gauthier MFFP'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import *
import processing
import os
from qgis.PyQt.QtGui import QIcon

class SdatToTifAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.


    Dossier = 'Folder'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Parametre Dossier
        self.addParameter(QgsProcessingParameterFile(self.Dossier,'Dossier des images .sdat', behavior=QgsProcessingParameterFile.Folder, defaultValue=None))


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        feedback.pushInfo("\nDébut de la conversion\n")

        # Parametres Dossier
        Folder = self.parameterAsString(parameters,  self.Dossier, context)

        # faire une liste des dossier UD_x
        list = os.listdir(Folder)
        for li in list:
            if (li.startswith("UD_")):

                li = li[3:]

                sdat = os.path.join(Folder,"UD_{}".format(li),"STWI", "TWI_SAGA.sdat")
                outputTif = os.path.join(Folder,"UD_{}".format(li),"STWI_UD_{}.tif".format(li))

                feedback.pushInfo("\nConversion du STWI_UD_{}.tif \n".format(li))


                processing.run("gdal:translate", {'INPUT':sdat,'TARGET_CRS':None,
                                                  'NODATA':None,'COPY_SUBDATASETS':False,'OPTIONS':'','EXTRA':'','DATA_TYPE':6,
                                                  'OUTPUT':outputTif})


        return {self.Dossier: 'Conversion terminée'}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Conversion'

    def icon(self):

        return QIcon(os.path.dirname(__file__) + '/image/tif.png')

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return SdatToTifAlgorithm()
